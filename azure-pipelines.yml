# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
#- master

pool:
  vmImage: ubuntu-latest

variables:
  tag: 1.0.0-$(Build.BuildId) 
  PROJECT_NAME: java-kubernetes
  PROJECT_KEY: pruthvi1987_java-kubernetes
  SONAR_TOKEN: 92edc45840350f9a713dec10cf172bc9d5c56eb3
  BRANCH: master

stages:

- stage: Code_Analysis
  displayName: Code Analysis
  jobs:
  - job: codeAnalysis
    steps:
    - task: CmdLine@2
      inputs:
        script: 'mvn sonar:sonar -Dsonar.projectKey=$PROJECT_KEY -Dsonar.login=$SONAR_TOKEN -Dsonar.sources=./src -Dsonar.java.binaries=**/* -Dsonar.projectName=$PROJECT_NAME -Dsonar.branch.name=$BRANCH'

- stage: Build_Package
  displayName: Build Package
  jobs:
  - job: buildPackage
    steps:
    
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'  
    - task: Docker@0
      displayName: 'Build an image'
      inputs:
        azureSubscription: 'Azure Resource Manager Connection'
        azureContainerRegistry: '{"loginServer":"azcoderegistry.azurecr.io", "id" : "/subscriptions/618d8a78-477a-4ddb-91d6-4919b3a835bd/resourceGroups/Azure-Training-pruthvirajsha/providers/Microsoft.ContainerRegistry/registries/azcoderegistry"}'
        imageName: 'java-kubernetes:$(tag)'
    - task: Docker@2
      inputs:
        containerRegistry: 'Azure Container Registry Connection'
        repository: 'azcoderegistry'
        command: 'push'
        tags: '$(tag)'
    
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: |
          **/*.jar
          Dockerfile
          k8s/**
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: package'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: package
      condition: succeededOrFailed()
    


        
        
- stage: Deploy_Dev
  displayName: Deploy Dev
  jobs:
  - job: deployDev
    steps:
    - script: echo Deploy Dev
