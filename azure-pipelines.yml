# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
#- master

pool:
  vmImage: ubuntu-latest

variables:
  tag: v1.$(Build.BuildId) 
  PROJECT_NAME: java-kubernetes
  PROJECT_KEY: pruthvi1987_java-kubernetes
  SONAR_TOKEN: 92edc45840350f9a713dec10cf172bc9d5c56eb3
  BRANCH: master

stages:

- stage: Code_Analysis
  displayName: Code Analysis
  jobs:
  - job: codeAnalysis
    steps:
    - task: CmdLine@2
      inputs:
        script: 'mvn sonar:sonar -Dsonar.projectKey=$PROJECT_KEY -Dsonar.login=$SONAR_TOKEN -Dsonar.sources=./src -Dsonar.java.binaries=**/* -Dsonar.projectName=$PROJECT_NAME -Dsonar.branch.name=$BRANCH'

- stage: Build
  displayName: Build 
  jobs:
  - job: buildPackage
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'
  - job: buildImage
    steps:  
    - task: Docker@0
      displayName: 'Build an image'
      inputs:
        azureSubscription: 'Azure Resource Manager Connection'
        azureContainerRegistry: '{"loginServer":"azcoderegistry.azurecr.io", "id" : "/subscriptions/618d8a78-477a-4ddb-91d6-4919b3a835bd/resourceGroups/Azure-Training-pruthvirajsha/providers/Microsoft.ContainerRegistry/registries/azcoderegistry"}'
        imageName: 'java-kubernetes:$(tag)'
  - job: pushImage
    steps: 
    - task: Docker@0
      displayName: 'Push an image'
      inputs:
        azureSubscription: 'Azure Resource Manager Connection'
        azureContainerRegistry: '{"loginServer":"azcoderegistry.azurecr.io", "id" : "/subscriptions/618d8a78-477a-4ddb-91d6-4919b3a835bd/resourceGroups/Azure-Training-pruthvirajsha/providers/Microsoft.ContainerRegistry/registries/azcoderegistry"}'
        action: 'Push an image'
        imageName: 'java-kubernetes:$(tag)'
  - job: buildMySqlImage
    steps:
    - task: Docker@0
      displayName: 'Build an image of mysql'
      inputs:
        azureSubscription: 'Azure Resource Manager Connection'
        azureContainerRegistry: '{"loginServer":"azcoderegistry.azurecr.io", "id" : "/subscriptions/618d8a78-477a-4ddb-91d6-4919b3a835bd/resourceGroups/Azure-Training-pruthvirajsha/providers/Microsoft.ContainerRegistry/registries/azcoderegistry"}'
        dockerFile: '**/Dockerfile1'
        imageName: 'mysql:5.6'
  - job: PushMySqlImage
    steps:  
    - task: Docker@0
      displayName: 'Push an image of mysql'
      inputs:
        azureSubscription: 'Azure Resource Manager Connection'
        azureContainerRegistry: '{"loginServer":"azcoderegistry.azurecr.io", "id" : "/subscriptions/618d8a78-477a-4ddb-91d6-4919b3a835bd/resourceGroups/Azure-Training-pruthvirajsha/providers/Microsoft.ContainerRegistry/registries/azcoderegistry"}'
        action: 'Push an image'
        imageName: 'mysql:5.6'
  - job: PublishBuildArtifacts
    steps:
    - task: replacetokens@4
      inputs:
        rootDirectory: 'k8s/app'
        targetFiles: 'app-deployment.yaml'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        escapeType: 'none'
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        useLegacyPattern: false
        enableTelemetry: true
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: |
          **/*.jar
          Dockerfile
          k8s/**
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: package'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: package
      condition: succeededOrFailed()
    


        
        
- stage: Deploy
  displayName: Deploy
  jobs:
  - job: deployOnK8s
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'package'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Kubernetes Service Connection'
        command: 'apply'
        useConfigurationFile: true
        configurationType: 'inline'
        inline: |
          $(System.DefaultWorkingDirectory)/package/app/app-configmap.yaml
          $(System.DefaultWorkingDirectory)/package/app/app-service.yaml
          $(System.DefaultWorkingDirectory)/package/app/app-deployment.yaml
          $(System.DefaultWorkingDirectory)/package/mysql/mysql-service.yaml
          $(System.DefaultWorkingDirectory)/package/mysql/mysql-deployment.yaml
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
